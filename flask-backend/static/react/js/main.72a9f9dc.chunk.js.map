{"version":3,"sources":["components/Constants.jsx","components/CustomDropdown.jsx","components/DownloadTemplate.jsx","components/CustomAlert.jsx","components/ImportAndMatch.jsx","App.js","serviceWorker.js","index.js"],"names":["HEADERS","STEPS","CustomDropdown","props","useState","dropdownOpen","setDropdownOpen","Dropdown","isOpen","toggle","prevState","DropdownToggle","caret","value","DropdownMenu","options","map","option","DropdownItem","id","onClick","onChange","DownloadTemplate","step1","constants","Row","Col","className","Button","color","axios","url","method","responseType","then","response","window","URL","createObjectURL","Blob","data","link","document","createElement","href","setAttribute","body","appendChild","click","icon","faDownload","CustomAlert","visible","setVisible","Alert","text","ImportAndMatch","headers","step2","step3","headersStarter","header","file","setFile","choiceState","setChoiceState","headerValues","setHeaderValues","uploadMessage","setUploadMessage","submitMessage","setSubmitMessage","onDropdownChange","e","target","getAttribute","csvToJSON","a","ourHeaders","Object","keys","theirHeaders","values","readString","jsonResult","newHeadersResult","jsonData","i","length","obj","j","newKey","oldKey","push","db","JSON","stringify","onSubmitMatches","config","matchSelections","hasDuplicates","console","log","post","res","catch","err","warn","array","Set","size","Container","class","FormData","append","faUpload","type","accept","aria-describedby","files","for","name","split","pop","xs","ListGroup","ListGroupItem","faRocket","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"js/main.72a9f9dc.chunk.js","sourcesContent":["export const HEADERS = ['firstName', 'lastName', 'asset', 'createdOn'];\r\n\r\nexport const TITLE = 'Import steps';\r\n\r\nexport const STEPS = [\r\n\t'Download our csv templates and add all of your lot information.',\r\n\t\"Upload the csv file containing your lot's information.\",\r\n\t'Drag and drop the uploaded groupings to match our groupings.',\r\n];\r\n","import React, { useState } from 'react';\r\nimport {\r\n\tDropdown,\r\n\tDropdownToggle,\r\n\tDropdownItem,\r\n\tDropdownMenu,\r\n} from 'reactstrap';\r\n\r\nconst CustomDropdown = (props) => {\r\n\tconst [dropdownOpen, setDropdownOpen] = useState(false);\r\n\tconst toggle = () => setDropdownOpen((prevState) => !prevState);\r\n\r\n\treturn (\r\n\t\t<Dropdown isOpen={dropdownOpen} toggle={toggle}>\r\n\t\t\t<DropdownToggle caret>{props.value}</DropdownToggle>\r\n\t\t\t<DropdownMenu>\r\n\t\t\t\t{props.options.map((option) => (\r\n\t\t\t\t\t<DropdownItem id={props.id} value={option} onClick={props.onChange}>\r\n\t\t\t\t\t\t{option}\r\n\t\t\t\t\t</DropdownItem>\r\n\t\t\t\t))}\r\n\t\t\t</DropdownMenu>\r\n\t\t</Dropdown>\r\n\t);\r\n};\r\n\r\nexport default CustomDropdown;\r\n","import React from 'react';\r\n\r\nimport * as constants from './Constants.jsx';\r\n\r\nimport { Row, Col, Button } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faDownload } from '@fortawesome/free-solid-svg-icons';\r\nimport axios from 'axios';\r\n\r\nfunction DownloadTemplate() {\r\n\tconst step1 = constants.STEPS[0];\r\n\r\n\tconst getFile = () => {\r\n    axios({\r\n      url: '/download',\r\n      method: 'GET',\r\n      responseType: 'blob',\r\n    }).then((response) => {\r\n       // hack solution without using external libraries\r\n       const url = window.URL.createObjectURL(new Blob([response.data]));\r\n       const link = document.createElement('a');\r\n       link.href = url;\r\n       link.setAttribute('download', 'artesiansoft.csv');\r\n       document.body.appendChild(link);\r\n       link.click();\r\n    });\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Row>\r\n\t\t\t<Col>\r\n\t\t\t\t<div className='ordered-list-icon'>1</div>&emsp;{step1}&emsp;\r\n\t\t\t\t<Button color='primary' onClick={getFile}>\r\n\t\t\t\t\tDownload (csv)&nbsp;&nbsp;\r\n\t\t\t\t\t<FontAwesomeIcon icon={faDownload} />\r\n\t\t\t\t</Button>\r\n\t\t\t</Col>\r\n\t\t</Row>\r\n\t);\r\n}\r\n\r\nexport default DownloadTemplate;\r\n","import React, { useState } from 'react';\r\nimport { Alert } from 'reactstrap';\r\n\r\nconst CustomAlert = (props) => {\r\n\tconst [visible, setVisible] = useState(props.visible);\r\n\tconst onDismiss = () => setVisible(false);\r\n\r\n\treturn (\r\n\t\t<Alert color={props.color} isOpen={visible} toggle={onDismiss}>\r\n\t\t\t{props.text}\r\n\t\t</Alert>\r\n\t);\r\n};\r\n\r\nexport default CustomAlert;\r\n","import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport * as constants from \"./Constants.jsx\";\r\n\r\nimport CustomDropdown from \"./CustomDropdown\";\r\nimport DownloadTemplate from \"./DownloadTemplate\";\r\nimport CustomAlert from \"./CustomAlert\";\r\n\r\nimport { readString } from \"react-papaparse\";\r\n\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  Button,\r\n} from \"reactstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faUpload, faRocket } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst ImportAndMatch = () => {\r\n  // Import constants\r\n  const headers = constants.HEADERS;\r\n  const title = constants.TITLE;\r\n\r\n  const step2 = constants.STEPS[1];\r\n  const step3 = constants.STEPS[2];\r\n  let DEFAULT_VALUE = \"None\";\r\n\r\n  // Create choices object\r\n  let headersStarter = {};\r\n  headers.map((header) => {\r\n    headersStarter[header] = DEFAULT_VALUE;\r\n  });\r\n\r\n  // The file the user uploads, should be a csv\r\n  const [file, setFile] = useState(\"\");\r\n\r\n  // The headers of the csv--selected and unselected, i.e., the options the user has to select from\r\n  const [choiceState, setChoiceState] = useState({\r\n    options: [DEFAULT_VALUE],\r\n  });\r\n\r\n  // The options the user has selected\r\n  const [headerValues, setHeaderValues] = useState(headersStarter);\r\n\r\n  const [uploadMessage, setUploadMessage] = useState({\r\n    visible: true,\r\n    color: \"info\",\r\n    text: \"Upload your csv file before proceeding.\",\r\n  });\r\n\r\n  const [submitMessage, setSubmitMessage] = useState({\r\n    visible: true,\r\n    color: \"info\",\r\n    text: \"Then, upload your matches to our servers.\",\r\n  });\r\n\r\n  // Sets file on file upload\r\n  const chooseFile = (e) => {\r\n    setFile(e.target.files[0]);\r\n  };\r\n\r\n  // Submit file to Flask backend and receive back JSONified CSV data; only take out headers (that's all that is needed)\r\n  const submitFile = () => {\r\n    const data = new FormData();\r\n    data.append(\"file\", file);\r\n    axios\r\n      .post(\"/upload\", data)\r\n      .then((res) => {\r\n        console.log(res);\r\n        setChoiceState({\r\n          options: res.data[0],\r\n        });\r\n        setUploadMessage({\r\n          visible: true,\r\n          color: \"success\",\r\n          text:\r\n            \"Your upload has succeeded. You match proceed to match our fields to yours.\",\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.warn(\"Error on the post request...\" + err);\r\n        setUploadMessage({\r\n          visible: true,\r\n          color: \"danger\",\r\n          text:\r\n            \"Your upload has failed. There appears to be an internal server error. Please try again later.\",\r\n        });\r\n      });\r\n  };\r\n\r\n  const onDropdownChange = (e) => {\r\n    // Deal with drop down values\r\n    headerValues[e.target.getAttribute(\"id\")] = e.target.value;\r\n    setHeaderValues(headerValues);\r\n\r\n    // Otherwise dropdowns won't update... strange bug\r\n    setChoiceState({\r\n      options: choiceState.options,\r\n    });\r\n  };\r\n\r\n  const csvToJSON = async (headers) => {\r\n    let ourHeaders = Object.keys(headers);\r\n    let theirHeaders = Object.values(headers);\r\n\r\n    const text = await file.text();\r\n    const jsonResult = await readString(text, {\r\n      header: true,\r\n    });\r\n\r\n    let newHeadersResult = [];\r\n    let jsonData = jsonResult.data;\r\n\r\n    for (let i = 0; i < jsonData.length; i++) {\r\n      let obj = jsonData[i];\r\n      for (let j = 0; j < ourHeaders.length; j++) {\r\n        // Get new, old key names from headers, new headerValues\r\n        let newKey = ourHeaders[j];\r\n        let oldKey = theirHeaders[j];\r\n        // Replace old key with new key\r\n        obj[newKey] = obj[oldKey];\r\n        delete obj[oldKey];\r\n      }\r\n      newHeadersResult.push(obj);\r\n    }\r\n    const db = JSON.stringify({ ...jsonData });\r\n    return db;\r\n  };\r\n\r\n  const onSubmitMatches = async () => {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n      },\r\n    };\r\n    let matchSelections = Object.values(headerValues);\r\n    if (hasDuplicates(matchSelections)) {\r\n      setSubmitMessage({\r\n        visible: true,\r\n        color: \"danger\",\r\n        text: \"Your upload has failed. Check you have no duplicate matchings.\",\r\n      });\r\n    } else {\r\n\t\t\tconst data = await csvToJSON(headerValues);\r\n\t\t\tconsole.log(JSON.stringify(data));\r\n      axios\r\n        .post(\"/submit\", data, config)\r\n        .then((res) => {\r\n          console.log(res);\r\n          setSubmitMessage({\r\n            visible: true,\r\n            color: \"success\",\r\n            text: \"Your upload has succeeded. Thank you for using our form.\",\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          console.warn(\"Error on the post request...\" + err);\r\n          setSubmitMessage({\r\n            visible: true,\r\n            color: \"danger\",\r\n            text:\r\n              \"Your upload has failed. There appears to be an internal server error. Please try again later.\",\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  // O(n) way of determining an array has duplicates\r\n  const hasDuplicates = (array) => {\r\n    return new Set(array).size !== array.length;\r\n  };\r\n\r\n  return (\r\n    <Container className=\"import\">\r\n      <Row>\r\n        <Col>\r\n          <h3>{title}</h3>\r\n        </Col>\r\n      </Row>\r\n\r\n      <DownloadTemplate />\r\n\r\n      <div class=\"spacer25\"></div>\r\n\r\n      <Row>\r\n        <Col>\r\n          <div className=\"ordered-list-icon\">2</div>&emsp;{step2}\r\n          <div class=\"input-group\">\r\n            <div class=\"input-group-prepend\">\r\n              <span\r\n                onClick={submitFile}\r\n                class=\"input-group-text\"\r\n                id=\"inputGroupFileAddon01\"\r\n              >\r\n                Upload&nbsp;&nbsp;\r\n                <FontAwesomeIcon icon={faUpload} />\r\n              </span>\r\n            </div>\r\n            <div class=\"custom-file\">\r\n              <input\r\n                type=\"file\"\r\n                accept=\".xls,.xlsx,.csv\"\r\n                class=\"custom-file-input\"\r\n                id=\"inputGroupFile01\"\r\n                aria-describedby=\"inputGroupFileAddon01\"\r\n                onChange={chooseFile}\r\n              />\r\n              <label class=\"custom-file-label\" for=\"inputGroupFile01\">\r\n                {file == \"\"\r\n                  ? \"Choose file\"\r\n                  : file.name.split(/[\\\\/]/g).pop().split(\".\")[0]}\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n\r\n      <div class=\"spacer5\"></div>\r\n\r\n      <Row>\r\n        <Col>\r\n          <CustomAlert\r\n            visible={uploadMessage.visible}\r\n            color={uploadMessage.color}\r\n            text={uploadMessage.text}\r\n          />\r\n        </Col>\r\n      </Row>\r\n\r\n      <div class=\"spacer25\"></div>\r\n\r\n      <Row>\r\n        <Col>\r\n          <div className=\"ordered-list-icon\">3</div>&emsp;{step3}\r\n        </Col>\r\n      </Row>\r\n\r\n      <div class=\"spacer25\"></div>\r\n      <hr />\r\n\r\n      <Row xs=\"2\">\r\n        <Col xs=\"6\">\r\n          <h4>Match our fields to yours</h4>\r\n          {headers.map((header) => (\r\n            <>\r\n              <Row xs=\"2\">\r\n                <Col xs=\"3\">{header}</Col>\r\n                <Col xs=\"3\">\r\n                  <CustomDropdown\r\n                    id={header}\r\n                    value={headerValues[header]}\r\n                    options={choiceState.options}\r\n                    onChange={onDropdownChange}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <div class=\"spacer10\"></div>\r\n            </>\r\n          ))}\r\n        </Col>\r\n\r\n        <Col xs=\"6\">\r\n          <Row>\r\n            <Col>\r\n              <h4>Uploaded fields</h4>\r\n              <ListGroup>\r\n                {choiceState.options.map((option) => (\r\n                  <ListGroupItem>{option}</ListGroupItem>\r\n                ))}\r\n              </ListGroup>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n\r\n      <div class=\"spacer25\"></div>\r\n\r\n      <Row>\r\n        <Col>\r\n          <Button color=\"primary\" onClick={onSubmitMatches}>\r\n            Submit matches&nbsp;&nbsp;\r\n            <FontAwesomeIcon icon={faRocket} />\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n\r\n      <div class=\"spacer5\"></div>\r\n\r\n      <Row>\r\n        <Col>\r\n          <CustomAlert\r\n            visible={submitMessage.visible}\r\n            color={submitMessage.color}\r\n            text={submitMessage.text}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ImportAndMatch;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport ImportAndMatch from './components/ImportAndMatch';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <ImportAndMatch />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}