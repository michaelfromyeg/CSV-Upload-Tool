{"version":3,"sources":["components/Constants.jsx","components/CustomDropdown.jsx","components/DownloadTemplate.jsx","components/CustomAlert.jsx","components/ImportAndMatch.jsx","App.js","serviceWorker.js","index.js"],"names":["HEADERS","STEPS","CustomDropdown","props","useState","dropdownOpen","setDropdownOpen","Dropdown","isOpen","toggle","prevState","DropdownToggle","caret","value","DropdownMenu","options","map","option","DropdownItem","id","onClick","onChange","DownloadTemplate","step1","constants","Row","Col","className","Button","color","axios","url","method","responseType","then","response","window","URL","createObjectURL","Blob","data","link","document","createElement","href","setAttribute","body","appendChild","click","icon","faDownload","CustomAlert","visible","setVisible","Alert","text","ImportAndMatch","headers","step2","step3","headersStarter","header","file","setFile","choiceState","setChoiceState","headerValues","setHeaderValues","uploadMessage","setUploadMessage","submitMessage","setSubmitMessage","onDropdownChange","e","target","getAttribute","csvToJSON","a","ourHeaders","Object","keys","theirHeaders","values","readString","jsonResult","newHeadersResult","jsonData","i","length","obj","j","newKey","oldKey","push","console","log","JSON","stringify","db","onSubmitMatches","matchSelections","hasDuplicates","post","res","catch","err","warn","array","Set","size","Container","class","FormData","append","faUpload","type","accept","aria-describedby","files","for","name","split","pop","xs","ListGroup","ListGroupItem","faRocket","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"js/main.c97ae7f1.chunk.js","sourcesContent":["export const HEADERS = ['firstName', 'lastName', 'asset', 'createdOn'];\r\n\r\nexport const TITLE = 'Import steps';\r\n\r\nexport const STEPS = [\r\n\t'Download our csv templates and add all of your lot information.',\r\n\t\"Upload the csv file containing your lot's information.\",\r\n\t'Drag and drop the uploaded groupings to match our groupings.',\r\n];\r\n","import React, { useState } from 'react';\r\nimport {\r\n\tDropdown,\r\n\tDropdownToggle,\r\n\tDropdownItem,\r\n\tDropdownMenu,\r\n} from 'reactstrap';\r\n\r\nconst CustomDropdown = (props) => {\r\n\tconst [dropdownOpen, setDropdownOpen] = useState(false);\r\n\tconst toggle = () => setDropdownOpen((prevState) => !prevState);\r\n\r\n\treturn (\r\n\t\t<Dropdown isOpen={dropdownOpen} toggle={toggle}>\r\n\t\t\t<DropdownToggle caret>{props.value}</DropdownToggle>\r\n\t\t\t<DropdownMenu>\r\n\t\t\t\t{props.options.map((option) => (\r\n\t\t\t\t\t<DropdownItem id={props.id} value={option} onClick={props.onChange}>\r\n\t\t\t\t\t\t{option}\r\n\t\t\t\t\t</DropdownItem>\r\n\t\t\t\t))}\r\n\t\t\t</DropdownMenu>\r\n\t\t</Dropdown>\r\n\t);\r\n};\r\n\r\nexport default CustomDropdown;\r\n","import React from 'react';\r\n\r\nimport * as constants from './Constants.jsx';\r\n\r\nimport { Row, Col, Button } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faDownload } from '@fortawesome/free-solid-svg-icons';\r\nimport axios from 'axios';\r\n\r\nfunction DownloadTemplate() {\r\n\tconst step1 = constants.STEPS[0];\r\n\r\n\tconst getFile = () => {\r\n    axios({\r\n      url: '/download',\r\n      method: 'GET',\r\n      responseType: 'blob',\r\n    }).then((response) => {\r\n       // hack solution without using external libraries\r\n       const url = window.URL.createObjectURL(new Blob([response.data]));\r\n       const link = document.createElement('a');\r\n       link.href = url;\r\n       link.setAttribute('download', 'artesiansoft.csv');\r\n       document.body.appendChild(link);\r\n       link.click();\r\n    });\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Row>\r\n\t\t\t<Col>\r\n\t\t\t\t<div className='ordered-list-icon'>1</div>&emsp;{step1}&emsp;\r\n\t\t\t\t<Button color='primary' onClick={getFile}>\r\n\t\t\t\t\tDownload (csv)&nbsp;&nbsp;\r\n\t\t\t\t\t<FontAwesomeIcon icon={faDownload} />\r\n\t\t\t\t</Button>\r\n\t\t\t</Col>\r\n\t\t</Row>\r\n\t);\r\n}\r\n\r\nexport default DownloadTemplate;\r\n","import React, { useState } from 'react';\r\nimport { Alert } from 'reactstrap';\r\n\r\nconst CustomAlert = (props) => {\r\n\tconst [visible, setVisible] = useState(props.visible);\r\n\tconst onDismiss = () => setVisible(false);\r\n\r\n\treturn (\r\n\t\t<Alert color={props.color} isOpen={visible} toggle={onDismiss}>\r\n\t\t\t{props.text}\r\n\t\t</Alert>\r\n\t);\r\n};\r\n\r\nexport default CustomAlert;\r\n","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport * as constants from './Constants.jsx';\r\n\r\nimport CustomDropdown from './CustomDropdown';\r\nimport DownloadTemplate from './DownloadTemplate';\r\nimport CustomAlert from './CustomAlert';\r\n\r\nimport { readString } from 'react-papaparse';\r\n\r\nimport {\r\n\tContainer,\r\n\tRow,\r\n\tCol,\r\n\tListGroup,\r\n\tListGroupItem,\r\n\tButton,\r\n} from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUpload, faRocket } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst ImportAndMatch = () => {\r\n\t// Import constants\r\n\tconst headers = constants.HEADERS;\r\n\tconst title = constants.TITLE;\r\n\r\n\tconst step2 = constants.STEPS[1];\r\n\tconst step3 = constants.STEPS[2];\r\n\tlet DEFAULT_VALUE = 'None';\r\n\r\n\t// Create choices object\r\n\tlet headersStarter = {};\r\n\theaders.map((header) => {\r\n\t\theadersStarter[header] = DEFAULT_VALUE;\r\n\t});\r\n\r\n\t// The file the user uploads, should be a csv\r\n\tconst [file, setFile] = useState('');\r\n\r\n\t// The headers of the csv--selected and unselected, i.e., the options the user has to select from\r\n\tconst [choiceState, setChoiceState] = useState({\r\n\t\toptions: [DEFAULT_VALUE],\r\n\t});\r\n\r\n\t// The options the user has selected\r\n\tconst [headerValues, setHeaderValues] = useState(headersStarter);\r\n\r\n\tconst [uploadMessage, setUploadMessage] = useState({\r\n\t\tvisible: true,\r\n\t\tcolor: 'info',\r\n\t\ttext: 'Upload your csv file before proceeding.',\r\n\t});\r\n\r\n\tconst [submitMessage, setSubmitMessage] = useState({\r\n\t\tvisible: true,\r\n\t\tcolor: 'info',\r\n\t\ttext: 'Then, upload your matches to our servers.',\r\n\t});\r\n\r\n\t// Sets file on file upload\r\n\tconst chooseFile = (e) => {\r\n\t\tsetFile(e.target.files[0]);\r\n\t};\r\n\r\n\t// Submit file to Flask backend and receive back JSONified CSV data; only take out headers (that's all that is needed)\r\n\tconst submitFile = () => {\r\n\t\tconst data = new FormData();\r\n\t\tdata.append('file', file);\r\n\t\taxios\r\n\t\t\t.post('/upload', data)\r\n\t\t\t.then((res) => {\r\n\t\t\t\tconsole.log(res);\r\n\t\t\t\tsetChoiceState({\r\n\t\t\t\t\toptions: res.data[0],\r\n\t\t\t\t});\r\n\t\t\t\tsetUploadMessage({\r\n\t\t\t\t\tvisible: true,\r\n\t\t\t\t\tcolor: 'success',\r\n\t\t\t\t\ttext:\r\n\t\t\t\t\t\t'Your upload has succeeded. You match proceed to match our fields to yours.',\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tconsole.warn('Error on the post request...' + err);\r\n\t\t\t\tsetUploadMessage({\r\n\t\t\t\t\tvisible: true,\r\n\t\t\t\t\tcolor: 'danger',\r\n\t\t\t\t\ttext:\r\n\t\t\t\t\t\t'Your upload has failed. There appears to be an internal server error. Please try again later.',\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t};\r\n\r\n\tconst onDropdownChange = (e) => {\r\n\t\t// Deal with drop down values\r\n\t\theaderValues[e.target.getAttribute('id')] = e.target.value;\r\n\t\tsetHeaderValues(headerValues);\r\n\r\n\t\t// Otherwise dropdowns won't update... strange bug\r\n\t\tsetChoiceState({\r\n\t\t\toptions: choiceState.options,\r\n\t\t});\r\n\t};\r\n\r\n\tconst csvToJSON = async (headers) => {\r\n\t\tlet ourHeaders = Object.keys(headers);\r\n\t\tlet theirHeaders = Object.values(headers);\r\n\r\n\t\tconst text = await file.text();\r\n\t\tconst jsonResult = await readString(text, {\r\n\t\t\theader: true,\r\n\t\t});\r\n\r\n\t\tlet newHeadersResult = [];\r\n\t\tlet jsonData = jsonResult.data\r\n\r\n\t\tfor (let i = 0; i < jsonData.length; i++) {\r\n\t\t\tlet obj = jsonData[i];\r\n\t\t\tfor (let j = 0; j < ourHeaders.length; j++) {\r\n\t\t\t\t// Get new, old key names from headers, new headerValues\r\n\t\t\t\tlet newKey = ourHeaders[j];\r\n\t\t\t\tlet oldKey = theirHeaders[j];\r\n\t\t\t\t// Replace old key with new key\r\n\t\t\t\tobj[newKey] = obj[oldKey];\r\n\t\t\t\tdelete obj[oldKey];\r\n\t\t\t}\r\n\t\t\tnewHeadersResult.push(obj);\r\n\t\t}\r\n\t\tconsole.log(JSON.stringify({ ...jsonData }))\r\n\t\tconst db = JSON.stringify({ ...jsonData })\r\n\t\treturn db;\r\n\t};\r\n\r\n\tconst onSubmitMatches = async () => {\r\n\t\tlet matchSelections = Object.values(headerValues);\r\n\t\tif (hasDuplicates(matchSelections)) {\r\n\t\t\tsetSubmitMessage({\r\n\t\t\t\tvisible: true,\r\n\t\t\t\tcolor: 'danger',\r\n\t\t\t\ttext: 'Your upload has failed. Check you have no duplicate matchings.',\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tconst data = await csvToJSON(headerValues);\r\n\t\t\taxios\r\n\t\t\t\t.post('/submit', data)\r\n\t\t\t\t.then(res => {\r\n\t\t\t\t\tconsole.log(res);\r\n\t\t\t\t\tsetSubmitMessage({\r\n\t\t\t\t\t\tvisible: true,\r\n\t\t\t\t\t\tcolor: 'success',\r\n\t\t\t\t\t\ttext: 'Your upload has succeeded. Thank you for using our form.',\r\n\t\t\t\t\t});\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => {\r\n\t\t\t\t\tconsole.warn('Error on the post request...' + err);\r\n\t\t\t\t\tsetSubmitMessage({\r\n\t\t\t\t\t\tvisible: true,\r\n\t\t\t\t\t\tcolor: 'danger',\r\n\t\t\t\t\t\ttext:\r\n\t\t\t\t\t\t\t'Your upload has failed. There appears to be an internal server error. Please try again later.',\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t// O(n) way of determining an array has duplicates\r\n\tconst hasDuplicates = (array) => {\r\n\t\treturn new Set(array).size !== array.length;\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Container className='import'>\r\n\t\t\t<Row>\r\n\t\t\t\t<Col>\r\n\t\t\t\t\t<h3>{title}</h3>\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\r\n\t\t\t<DownloadTemplate />\r\n\r\n\t\t\t<div class='spacer25'></div>\r\n\r\n\t\t\t<Row>\r\n\t\t\t\t<Col>\r\n\t\t\t\t\t<div className='ordered-list-icon'>2</div>&emsp;{step2}\r\n\t\t\t\t\t<div class='input-group'>\r\n\t\t\t\t\t\t<div class='input-group-prepend'>\r\n\t\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\t\tonClick={submitFile}\r\n\t\t\t\t\t\t\t\tclass='input-group-text'\r\n\t\t\t\t\t\t\t\tid='inputGroupFileAddon01'>\r\n\t\t\t\t\t\t\t\tUpload&nbsp;&nbsp;\r\n\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faUpload} />\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class='custom-file'>\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\ttype='file'\r\n\t\t\t\t\t\t\t\taccept='.xls,.xlsx,.csv'\r\n\t\t\t\t\t\t\t\tclass='custom-file-input'\r\n\t\t\t\t\t\t\t\tid='inputGroupFile01'\r\n\t\t\t\t\t\t\t\taria-describedby='inputGroupFileAddon01'\r\n\t\t\t\t\t\t\t\tonChange={chooseFile}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<label class='custom-file-label' for='inputGroupFile01'>\r\n\t\t\t\t\t\t\t\t{file == ''\r\n\t\t\t\t\t\t\t\t\t? 'Choose file'\r\n\t\t\t\t\t\t\t\t\t: file.name.split(/[\\\\/]/g).pop().split('.')[0]}\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\r\n\t\t\t<div class='spacer5'></div>\r\n\r\n\t\t\t<Row>\r\n\t\t\t\t<Col>\r\n\t\t\t\t\t<CustomAlert\r\n\t\t\t\t\t\tvisible={uploadMessage.visible}\r\n\t\t\t\t\t\tcolor={uploadMessage.color}\r\n\t\t\t\t\t\ttext={uploadMessage.text}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\r\n\t\t\t<div class='spacer25'></div>\r\n\r\n\t\t\t<Row>\r\n\t\t\t\t<Col>\r\n\t\t\t\t\t<div className='ordered-list-icon'>3</div>&emsp;{step3}\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\r\n\t\t\t<div class='spacer25'></div>\r\n\t\t\t<hr />\r\n\r\n\t\t\t<Row xs='2'>\r\n\t\t\t\t<Col xs='6'>\r\n\t\t\t\t\t<h4>Match our fields to yours</h4>\r\n\t\t\t\t\t{headers.map((header) => (\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t<Row xs='2'>\r\n\t\t\t\t\t\t\t\t<Col xs='3'>{header}</Col>\r\n\t\t\t\t\t\t\t\t<Col xs='3'>\r\n\t\t\t\t\t\t\t\t\t<CustomDropdown\r\n\t\t\t\t\t\t\t\t\t\tid={header}\r\n\t\t\t\t\t\t\t\t\t\tvalue={headerValues[header]}\r\n\t\t\t\t\t\t\t\t\t\toptions={choiceState.options}\r\n\t\t\t\t\t\t\t\t\t\tonChange={onDropdownChange}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t<div class='spacer10'></div>\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</Col>\r\n\r\n\t\t\t\t<Col xs='6'>\r\n\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t<h4>Uploaded fields</h4>\r\n\t\t\t\t\t\t\t<ListGroup>\r\n\t\t\t\t\t\t\t\t{choiceState.options.map((option) => (\r\n\t\t\t\t\t\t\t\t\t<ListGroupItem>{option}</ListGroupItem>\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t</ListGroup>\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\r\n\t\t\t<div class='spacer25'></div>\r\n\r\n\t\t\t<Row>\r\n\t\t\t\t<Col>\r\n\t\t\t\t\t<Button color='primary' onClick={onSubmitMatches}>\r\n\t\t\t\t\t\tSubmit matches&nbsp;&nbsp;\r\n\t\t\t\t\t\t<FontAwesomeIcon icon={faRocket} />\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\r\n\t\t\t<div class='spacer5'></div>\r\n\r\n\t\t\t<Row>\r\n\t\t\t\t<Col>\r\n\t\t\t\t\t<CustomAlert\r\n\t\t\t\t\t\tvisible={submitMessage.visible}\r\n\t\t\t\t\t\tcolor={submitMessage.color}\r\n\t\t\t\t\t\ttext={submitMessage.text}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\t\t</Container>\r\n\t);\r\n};\r\n\r\nexport default ImportAndMatch;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport ImportAndMatch from './components/ImportAndMatch';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <ImportAndMatch />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}