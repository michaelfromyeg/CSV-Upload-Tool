{"version":3,"sources":["components/Constants.jsx","components/CustomDropdown.jsx","components/DownloadTemplate.jsx","components/CustomAlert.jsx","components/ImportAndMatch.jsx","App.js","serviceWorker.js","index.js"],"names":["HEADERS","STEPS","CustomDropdown","props","useState","dropdownOpen","setDropdownOpen","Dropdown","isOpen","toggle","prevState","DropdownToggle","caret","value","DropdownMenu","options","map","option","DropdownItem","id","onClick","onChange","DownloadTemplate","step1","constants","Row","Col","className","Button","color","icon","faDownload","CustomAlert","visible","setVisible","Alert","text","ImportAndMatch","headers","step2","step3","headersStarter","header","file","setFile","choiceState","setChoiceState","headerValues","setHeaderValues","uploadMessage","setUploadMessage","submitMessage","setSubmitMessage","onDropdownChange","e","target","getAttribute","hasDuplicates","array","Set","size","length","Container","class","data","FormData","append","axios","post","then","res","catch","err","console","warn","faUpload","type","accept","aria-describedby","files","for","name","split","pop","xs","ListGroup","ListGroupItem","matchSelections","Object","values","log","faRocket","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"js/main.403a9366.chunk.js","sourcesContent":["export const HEADERS = ['firstName', 'lastName', 'asset', 'createdOn'];\r\n\r\nexport const TITLE = 'Import steps';\r\n\r\nexport const STEPS = ['Download our csv templates and add all of your lot information.',\r\n                        'Upload the csv file containing your lot\\'s information.',\r\n                        'Drag and drop the uploaded groupings to match our groupings.'];","import React, { useState } from \"react\";\r\nimport {\r\n  Dropdown,\r\n  DropdownToggle,\r\n  DropdownItem,\r\n  DropdownMenu\r\n} from \"reactstrap\";\r\n\r\nconst CustomDropdown = (props) => {\r\n  const [dropdownOpen, setDropdownOpen] = useState(false);\r\n  const toggle = () => setDropdownOpen(prevState => !prevState);\r\n\r\n  return (\r\n    <Dropdown\r\n      isOpen={dropdownOpen}\r\n      toggle={toggle}\r\n    >\r\n      <DropdownToggle caret>{props.value}</DropdownToggle>\r\n      <DropdownMenu>\r\n        {props.options.map(option => (\r\n          <DropdownItem id={props.id} value={option} onClick={props.onChange}>\r\n            {option}\r\n          </DropdownItem>\r\n        ))}\r\n      </DropdownMenu>\r\n    </Dropdown>\r\n  );\r\n}\r\n\r\nexport default CustomDropdown;\r\n","import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport * as constants from \"./Constants.jsx\";\r\n\r\nimport { Row, Col, Button } from \"reactstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faDownload } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nfunction DownloadTemplate() {\r\n  const step1 = constants.STEPS[0];\r\n\r\n  return (\r\n      <Row>\r\n        <Col>\r\n          <div className=\"ordered-list-icon\">1</div>&emsp;{step1}&emsp;\r\n          <Button color=\"primary\">\r\n            Download (csv)&nbsp;&nbsp;\r\n            <FontAwesomeIcon icon={faDownload} />\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n  );\r\n}\r\n\r\nexport default DownloadTemplate;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n    Alert\r\n} from \"reactstrap\";\r\n\r\nconst CustomAlert = (props) => {\r\n\r\n    const [visible, setVisible] = useState(props.visible);\r\n    const onDismiss = () => setVisible(false);\r\n\r\n    return (\r\n        <Alert color={props.color} isOpen={visible} toggle={onDismiss}>\r\n            {props.text}\r\n        </Alert>\r\n    );\r\n}\r\n\r\nexport default CustomAlert;\r\n\r\n","import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport * as constants from \"./Constants.jsx\";\r\n\r\nimport CustomDropdown from \"./CustomDropdown\";\r\nimport DownloadTemplate from \"./DownloadTemplate\";\r\nimport CustomAlert from \"./CustomAlert\";\r\n\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  Button\r\n} from \"reactstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faUpload, faRocket } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst ImportAndMatch = () => {\r\n  // Import constants\r\n  const headers = constants.HEADERS;\r\n  const title = constants.TITLE;\r\n\r\n  const step2 = constants.STEPS[1];\r\n  const step3 = constants.STEPS[2];\r\n  let DEFAULT_VALUE = \"None\";\r\n\r\n  // Create choices object\r\n  let headersStarter = {};\r\n  headers.map(header => {\r\n    headersStarter[header] = DEFAULT_VALUE;\r\n  });\r\n\r\n  // The file the user uploads, should be a csv\r\n  const [file, setFile] = useState(\"\");\r\n\r\n  // The headers of the csv--selected and unselected, i.e., the options the user has to select from\r\n  const [choiceState, setChoiceState] = useState({\r\n    options: [DEFAULT_VALUE]\r\n  });\r\n\r\n  // The options the user has selected\r\n  const [headerValues, setHeaderValues] = useState(headersStarter);\r\n\r\n  const [uploadMessage, setUploadMessage] = useState({\r\n    visible: true,\r\n    color: \"info\",\r\n    text: \"Upload your csv file before proceeding.\"\r\n  });\r\n\r\n  const [submitMessage, setSubmitMessage] = useState({\r\n    visible: true,\r\n    color: \"info\",\r\n    text: \"Then, upload your matches to our servers.\"\r\n  });\r\n\r\n  // Sets file on file upload\r\n  const chooseFile = e => {\r\n    setFile(e.target.files[0]);\r\n  };\r\n\r\n  // Submit file to Flask backend and receive back JSONified CSV data; only take out headers (that's all that is needed)\r\n  const submitFile = e => {\r\n    const data = new FormData();\r\n    data.append(\"file\", file);\r\n    axios\r\n      .post(\"/upload\", data)\r\n      .then(res => {\r\n        setChoiceState({\r\n          options: res.data[0]\r\n        });\r\n        setUploadMessage({\r\n          visible: true,\r\n          color: \"success\",\r\n          text:\r\n            \"Your upload has succeeded. You match proceed to match our fields to yours.\"\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.warn(\"Error on the post request...\" + err);\r\n        setUploadMessage({\r\n          visible: true,\r\n          color: \"danger\",\r\n          text:\r\n            \"Your upload has failed. There appears to be an internal server error. Please try again later.\"\r\n        });\r\n      });\r\n  };\r\n\r\n  const onDropdownChange = e => {\r\n    // Deal with drop down values\r\n    headerValues[e.target.getAttribute(\"id\")] = e.target.value;\r\n    setHeaderValues(headerValues);\r\n\r\n    // Otherwise dropdowns won't update... strange bug\r\n    setChoiceState({\r\n      options: choiceState.options\r\n    });\r\n  };\r\n\r\n  const onSubmitMatches = e => {\r\n    let matchSelections = Object.values(headerValues);\r\n    if (hasDuplicates(matchSelections)) {\r\n      setSubmitMessage({\r\n        visible: true,\r\n        color: \"danger\",\r\n        text: \"Your upload has failed. Check you have no duplicate matchings.\"\r\n      });\r\n    } else {\r\n      const data = headerValues;\r\n      axios\r\n        .post(\"/submit\", data)\r\n        .then(res => {\r\n          console.log(res);\r\n          setSubmitMessage({\r\n            visible: true,\r\n            color: \"success\",\r\n            text: \"Your upload has succeeded. Thank you for using our form.\"\r\n          });\r\n        })\r\n        .catch(err => {\r\n          console.warn(\"Error on the post request...\" + err);\r\n          setSubmitMessage({\r\n            visible: true,\r\n            color: \"danger\",\r\n            text:\r\n              \"Your upload has failed. There appears to be an internal server error. Please try again later.\"\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  // O(n) way of determining an array has duplicates\r\n  const hasDuplicates = array => {\r\n    return new Set(array).size !== array.length;\r\n  };\r\n\r\n  return (\r\n    <Container className=\"import\">\r\n      <Row>\r\n        <Col>\r\n          <h3>{title}</h3>\r\n        </Col>\r\n      </Row>\r\n\r\n      <DownloadTemplate />\r\n\r\n      <div class=\"spacer25\"></div>\r\n\r\n      <Row>\r\n        <Col>\r\n          <div className=\"ordered-list-icon\">2</div>&emsp;{step2}\r\n          <div class=\"input-group\">\r\n            <div class=\"input-group-prepend\">\r\n              <span\r\n                onClick={submitFile}\r\n                class=\"input-group-text\"\r\n                id=\"inputGroupFileAddon01\"\r\n              >\r\n                Upload&nbsp;&nbsp;\r\n                <FontAwesomeIcon icon={faUpload} />\r\n              </span>\r\n            </div>\r\n            <div class=\"custom-file\">\r\n              <input\r\n                type=\"file\"\r\n                accept=\".xls,.xlsx,.csv\"\r\n                class=\"custom-file-input\"\r\n                id=\"inputGroupFile01\"\r\n                aria-describedby=\"inputGroupFileAddon01\"\r\n                onChange={chooseFile}\r\n              />\r\n              <label class=\"custom-file-label\" for=\"inputGroupFile01\">\r\n                {file == \"\"\r\n                  ? \"Choose file\"\r\n                  : file.name\r\n                      .split(/[\\\\/]/g)\r\n                      .pop()\r\n                      .split(\".\")[0]}\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n\r\n      <div class=\"spacer5\"></div>\r\n\r\n      <Row>\r\n        <Col>\r\n          <CustomAlert\r\n            visible={uploadMessage.visible}\r\n            color={uploadMessage.color}\r\n            text={uploadMessage.text}\r\n          />\r\n        </Col>\r\n      </Row>\r\n\r\n      <div class=\"spacer25\"></div>\r\n\r\n      <Row>\r\n        <Col>\r\n          <div className=\"ordered-list-icon\">3</div>&emsp;{step3}\r\n        </Col>\r\n      </Row>\r\n\r\n      <div class=\"spacer25\"></div>\r\n      <hr />\r\n\r\n      <Row xs=\"2\">\r\n        <Col xs=\"6\">\r\n          <h4>Match our fields to yours</h4>\r\n          {headers.map(header => (\r\n            <>\r\n              <Row xs=\"2\">\r\n                <Col xs=\"3\">{header}</Col>\r\n                <Col xs=\"3\">\r\n                  <CustomDropdown\r\n                    id={header}\r\n                    value={headerValues[header]}\r\n                    options={choiceState.options}\r\n                    onChange={onDropdownChange}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <div class=\"spacer10\"></div>\r\n            </>\r\n          ))}\r\n        </Col>\r\n\r\n        <Col xs=\"6\">\r\n          <Row>\r\n            <Col>\r\n              <h4>Uploaded fields</h4>\r\n              <ListGroup>\r\n                {choiceState.options.map(option => (\r\n                  <ListGroupItem>{option}</ListGroupItem>\r\n                ))}\r\n              </ListGroup>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n\r\n      <div class=\"spacer25\"></div>\r\n\r\n      <Row>\r\n        <Col>\r\n          <Button color=\"primary\" onClick={onSubmitMatches}>\r\n            Submit matches&nbsp;&nbsp;\r\n            <FontAwesomeIcon icon={faRocket} />\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n\r\n      <div class=\"spacer5\"></div>\r\n\r\n      <Row>\r\n        <Col>\r\n          {console.log(submitMessage) }\r\n          <CustomAlert\r\n            visible={submitMessage.visible}\r\n            color={submitMessage.color}\r\n            text={submitMessage.text}\r\n          />\r\n          </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ImportAndMatch;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport ImportAndMatch from './components/ImportAndMatch';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <ImportAndMatch />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}