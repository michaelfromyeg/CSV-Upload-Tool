{"version":3,"sources":["components/UploadFile.jsx","App.js","serviceWorker.js","index.js"],"names":["UploadFile","useState","file","setFile","filename","setFilename","className","id","type","aria-describedby","onChange","e","console","log","target","files","name","htmlFor","onClick","data","FormData","append","axios","post","then","res","catch","err","warn","App","window","token","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"uRAsDeA,MAnDf,WAAuB,IAAD,EACIC,mBAAS,IADb,mBACbC,EADa,KACPC,EADO,OAEYF,mBAAS,eAFrB,mBAEbG,EAFa,KAEHC,EAFG,OAGEJ,mBAAS,IAHX,mBAsBpB,OAtBoB,UAuBlB,yBAAKK,UAAU,UACb,4CACA,6FACA,yBAAKA,UAAU,eACb,yBAAKA,UAAU,uBACb,0BAAMA,UAAU,mBAAmBC,GAAG,yBAAtC,qBAIF,yBAAKD,UAAU,eACb,2BACEE,KAAK,OACLF,UAAU,oBACVC,GAAG,mBACHE,mBAAiB,wBACjBC,SAjCO,SAAAC,GACfC,QAAQC,IAAI,YACZV,EAAQQ,EAAEG,OAAOC,MAAM,IACvBV,EAAYM,EAAEG,OAAOC,MAAM,GAAGC,SAgCxB,2BAAOV,UAAU,oBAAoBW,QAAQ,oBAC1Cb,KAIP,4BAAQc,QAlCO,SAAAP,GACjBC,QAAQC,IAAI,cACZ,IAAMM,EAAO,IAAIC,SACjBD,EAAKE,OAAO,OAAQnB,GAEpBoB,IACGC,KAAK,UAAWJ,GAChBK,MAAK,SAAAC,GAAG,OAAIb,QAAQC,IAAIY,MACxBC,OAAM,SAAAC,GAAG,OAAIf,QAAQgB,KAAKD,QA0B3B,WACA,4FCjCSE,MAVf,WACE,OACE,yBAAKvB,UAAU,OACb,0CAAiBwB,OAAOC,OACxB,2CACA,kBAAC,EAAD,QCCcC,QACW,cAA7BF,OAAOG,SAASC,UAEe,UAA7BJ,OAAOG,SAASC,UAEhBJ,OAAOG,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdlB,OAAM,SAAAmB,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"js/main.99df2edd.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from 'axios';\r\n\r\nfunction UploadFile() {\r\n  const [file, setFile] = useState(\"\");\r\n  const [filename, setFilename] = useState(\"Choose file\");\r\n  const [url, setURL] = useState(\"\");\r\n\r\n  const onChange = e => {\r\n    console.log(\"onChange\");\r\n    setFile(e.target.files[0]); // Will only take first file if multiple selected\r\n    setFilename(e.target.files[0].name);\r\n  };\r\n\r\n  const submitFile = e => {\r\n    console.log(\"submitFile\");\r\n    const data = new FormData();\r\n    data.append(\"file\", file);\r\n\r\n    axios\r\n      .post(\"/upload\", data)\r\n      .then(res => console.log(res))\r\n      .catch(err => console.warn(err));\r\n  };\r\n\r\n  return (\r\n    <div className=\"import\">\r\n      <h3>Import steps</h3>\r\n      <p>Download our csv templates and add all of your lot information</p>\r\n      <div className=\"input-group\">\r\n        <div className=\"input-group-prepend\">\r\n          <span className=\"input-group-text\" id=\"inputGroupFileAddon01\">\r\n            Upload your file\r\n          </span>\r\n        </div>\r\n        <div className=\"custom-file\">\r\n          <input\r\n            type=\"file\"\r\n            className=\"custom-file-input\"\r\n            id=\"inputGroupFile01\"\r\n            aria-describedby=\"inputGroupFileAddon01\"\r\n            onChange={onChange}\r\n          />\r\n          <label className=\"custom-file-label\" htmlFor=\"inputGroupFile01\">\r\n            {filename}\r\n          </label>\r\n        </div>\r\n      </div>\r\n      <button onClick={ submitFile }>Upload </button>\r\n      <p>Drag and drop the uploaded groupings to match our groupings</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UploadFile;\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport UploadFile from './components/UploadFile';\n//import MatchFields from './components/matchFields';\n//<MatchFields></MatchFields>\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <p>My token is { window.token }</p>\n      <h1>User Import</h1>\n      <UploadFile />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}